name: Backend tests and deploy

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  COMPOSE_FILE: deploy/docker-compose.yml
  DJANGO_TEST_CMD: "pytest -q"   # при желании поменяй на `python manage.py test --noinput`

jobs:
  test_backend:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Sanity: show repo and compose
        run: |
          echo "PWD: $PWD"
          ls -la
          ls -la deploy || true
          test -f "$COMPOSE_FILE" || (echo "::error::File $COMPOSE_FILE not found" && exit 1)

      - name: Docker & Compose versions
        run: |
          docker --version
          docker compose version

      - name: Build backend (and deps)
        run: docker compose -f "$COMPOSE_FILE" build backend

      - name: Start DB (if defined)
        run: docker compose -f "$COMPOSE_FILE" up -d db || true

      - name: Run backend tests (storageapp)
        shell: bash
        run: |
          set -e
          # найдём, где лежат тесты (оба варианта на случай опечатки)
          FOUND=""
          for p in backend/storageapp/tests backend/storeageapp/tests; do
            if [ -d "$p" ]; then FOUND="$p"; break; fi
          done
          if [ -z "$FOUND" ]; then
            echo "::warning::Tests folder not found. Falling back to default app runner."
            docker compose -f "$COMPOSE_FILE" run --rm backend bash -lc \
              '$DJANGO_TEST_CMD || python manage.py test --noinput'
          else
            echo "Using tests at: $FOUND"
            docker compose -f "$COMPOSE_FILE" run --rm backend bash -lc \
              '$DJANGO_TEST_CMD "$FOUND" || python manage.py test storageapp --noinput'
          fi

  deploy:
    needs: test_backend
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Deploy over SSH and run rebuild.sh
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT || 22 }}
          script_stop: true
          script: |
            set -e
            cd ~/mycloud || cd /home/${{ secrets.SSH_USER }}/mycloud
            git pull --rebase
            TESTS=0 ./deploy/rebuild.sh --no-cache --pull --skip-smoke

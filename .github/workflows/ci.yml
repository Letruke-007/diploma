name: CI (backend unit tests)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  backend-tests:
    runs-on: ubuntu-latest

    services:
      db:
        image: postgres:15
        env:
          POSTGRES_DB: mycloud
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=10

    env:
      # ВАЖНО: явно на 127.0.0.1, не localhost
      DATABASE_URL: postgres://postgres:postgres@127.0.0.1:5432/mycloud
      DB_NAME: mycloud
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_HOST: 127.0.0.1
      DB_PORT: "5432"
      POSTGRES_DB: mycloud
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_HOST: 127.0.0.1
      POSTGRES_PORT: "5432"
      SECRET_KEY: test-secret-key
      DEBUG: "1"
      PYTHONUNBUFFERED: "1"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install system deps (psycopg/psycopg2, psql client)
        run: |
          sudo apt-get update
          sudo apt-get install -y libpq-dev postgresql-client

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip wheel setuptools
          if [ -f backend/requirements/prod.txt ]; then
            pip install -r backend/requirements/prod.txt
          elif [ -f backend/requirements.txt ]; then
            pip install -r backend/requirements.txt
          elif [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install django psycopg2-binary
          fi

      - name: Wait for Postgres and ping
        run: |
          for i in {1..30}; do
            if pg_isready -h 127.0.0.1 -p 5432 -U postgres; then
              echo "Postgres is ready"; break
            fi
            echo "Waiting for Postgres... ($i)"; sleep 2
          done
          PGPASSWORD=postgres psql -h 127.0.0.1 -p 5432 -U postgres -d mycloud -c 'select 1;'

      - name: Debug tree
        run: |
          ls -la backend || true
          ls -la backend/accounts || true
          ls -la backend/accounts/migrations || true
          ls -la backend/storageapp || true
          ls -la backend/storageapp/migrations || true
          ls -la backend/storageapp/tests || true

      # === КЛЮЧЕВОЕ: сначала генерим недостающие миграции, затем применяем ===
      - name: Make migrations (accounts, storageapp)
        working-directory: backend
        run: |
          python manage.py makemigrations accounts storageapp --noinput || true
          # на случай если приложения не менялись — команда вернёт "No changes detected"

      - name: Migrate
        working-directory: backend
        run: python manage.py migrate --noinput

      - name: Run tests (storageapp only)
        working-directory: backend
        run: |
          if [ ! -d "storageapp/tests" ]; then
            echo "::error::Directory backend/storageapp/tests not found"; exit 1
          fi
          python manage.py test storageapp -v 2 --noinput

services:
  db:
    image: postgres:16
    container_name: deploy-db-1
    restart: unless-stopped
    environment:
      POSTGRES_DB: mycloud
      POSTGRES_USER: mycloud
      POSTGRES_PASSWORD: mycloud
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mycloud -d mycloud"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    container_name: deploy-backend-1
    build:
      context: ..
      dockerfile: backend/Dockerfile
      target: be
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    environment:
      DJANGO_SETTINGS_MODULE: mycloud.settings.prod
      DATABASE_URL: postgres://mycloud:mycloud@db:5432/mycloud
    command: >
      gunicorn mycloud.wsgi:application
      --bind 0.0.0.0:8000
      --timeout 300
      --graceful-timeout 300
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "python - <<'PY'\nimport os, django\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', os.getenv('DJANGO_SETTINGS_MODULE','mycloud.settings.prod'))\ndjango.setup(); from django.db import connections; connections['default'].cursor().execute('SELECT 1'); print('OK')\nPY",
        ]
      interval: 20s
      timeout: 10s
      retries: 5

  nginx:
    build:
      context: ..
      dockerfile: backend/Dockerfile
      target: nginx
    container_name: deploy-nginx-1
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - ./certbot/www:/var/www/certbot:ro
    tmpfs:
      - /var/cache/nginx:rw,exec,mode=0755,size=256m
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://127.0.0.1/health || exit 1"]
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 30s

volumes:
  pgdata:
